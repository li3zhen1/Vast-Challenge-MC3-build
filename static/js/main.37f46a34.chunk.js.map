{"version":3,"sources":["Utils.ts","MapRenderer.ts","MapBackground.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getTimestamp","time","Math","floor","getIndexByTimestamp","startTime","timeWindowInSeconds","startTimestamp","currentTime","currentTimestamp","collectKeywordsByLocationTimeline","raw","ccDataRecords","filter","it","type","stat","Map","forEach","set","location","concat","get","minx","miny","pointTranslate","coordinates","dx","dy","scale","split","map","cc","x","parseFloat","y","join","MapOutline","fill","transform","d","loadTheme","createTheme","palette","themePrimary","themeLighterAlt","themeLighter","themeLight","themeTertiary","themeSecondary","themeDarkAlt","themeDark","themeDarker","neutralLighterAlt","neutralLighter","neutralLight","neutralQuaternaryAlt","neutralQuaternary","neutralTertiaryAlt","neutralTertiary","neutralSecondary","neutralPrimaryAlt","neutralPrimary","neutralDark","black","white","defaultFontStyle","fontFamily","generatedColor","Array","idx","getPersonaInitialsColor","text","String","colors","timeToLiteralString","timeString","slice","eventsToDisplay","name","offset","offsetX","highlightWord","_allKeywords","records","Object","keys","data","author","maxHeight","xAxisAttrib","minTime","App","useState","allKeywords","setAllKeyword","timeKeywordViewRef","useRef","timeSlices","setTimeSlices","selectedKeywords","setSelectedKeywords","isCrossFiltering","setCrossFiltering","crossFilterStart","setCrossFilterStart","crossFilterEnd","setCrossFilterEnd","placeName","setPlaceName","textFieldRef","React","flattenedRecordCache","setFlattenedRecordCache","useEffect","microblogRecords","endTime","keywords","getIndex","statisticLength","keywordStatistics","keyword","statistic","record","toLowerCase","message","includes","index","Number","date","collectKeywordsByTimeline","length","svg","d3","svgRect","node","getBoundingClientRect","yAxisAttrib","maxValue","flattened","onUniform","flatMap","_","timeIndex","accumulated","paddedWithZero","from","value","start","end","flattenRecords","items","xAxis","select","yAxis","xText","yText","group","selectAll","enter","append","attr","h","width","v","e","findIndex","i","transition","duration","update","remove","current","uniformCrossFilterXValue","useCallback","getTimeIndexByNonUniformedOffsetX","getTimeByNonUniformedOffsetX","secondsElapsed","second","hour","collectSlicedKeywordStatics","_startIndex","_endIndex","startIndex","min","endIndex","max","frequency","find","reduce","a","b","useLayoutEffect","keyEvents","correspondingRecords","useMemo","timeRegion","count","blog","publishTime","sort","isModalOpen","setModalOpen","mapSvgSelection","svgg","size","g","street","id","style","streetDataRenderer","streetData","coordinateRecords","locationStat","stripeLayer","kewordsAndCorrespondingColor","_timeRegion","onClickNode","poiLayer","actualPoiPoints","poiName","blogs","encoding","enc","_enter","on","ev","color","tagPointsOfInterests","stripeSvgSelection","it2","className","paddingTop","position","pointerEvents","minWidth","height","borderRadius","top","padding","left","abs","fontWeight","fontSize","lineHeight","backgroundColor","backdropFilter","WebkitBackdropFilter","_it","display","marginRight","fontFeatureSettings","ref","onContextMenu","preventDefault","mixBlendMode","onMouseDown","nativeEvent","onMouseUp","onMouseMove","justifyContent","alignItems","onClick","selected","Set","has","delete","add","undefined","viewBox","xmlns","right","marginTop","paddingBottom","Modal","isOpen","styles","main","minHeight","overlay","root","background","Text","variant","block","marginBottom","gridTemplateColumns","gridTemplateRows","columnGap","rowGap","TextField","label","gridColumnEnd","gridColumnStart","placeholder","componentRef","DefaultButton","PrimaryButton","match","alert","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.37f46a34.chunk.js","sourcesContent":["import type { IMicroblogRecord } from \"./App\";\n\nexport interface IKeywordStatistics {\n    keyword: string,\n    statistic: number[]\n}\n\nexport type IKeywordLocationStatistics = Map<string, IMicroblogRecord[]>\n\nexport const getTimestamp = (time: number) => {\n    const hour = (Math.floor(time / 10000)) % 100;\n    const minute = (Math.floor(time / 100)) % 100;\n    const second = time % 100;\n    return hour * 3600 + minute * 60 + second;\n}\n\nexport const getIndexByTimestamp = (\n    startTime: number,\n    timeWindowInSeconds: number\n) => {\n    const startTimestamp = getTimestamp(startTime)\n    return (currentTime: number) => {\n        const currentTimestamp = getTimestamp(currentTime)\n        return Math.floor((currentTimestamp - startTimestamp) / timeWindowInSeconds)\n    }\n}\n\nexport const collectKeywordsByLocationTimeline = (\n    raw: IMicroblogRecord[],\n    // startTime: number,\n    // endTime: number,\n    // timeWindowInSeconds: number,\n    // keywords: string[],\n): IKeywordLocationStatistics => {\n    const ccDataRecords = raw.filter(it => it.type === 'ccdata')\n    let stat: IKeywordLocationStatistics = new Map();\n    ccDataRecords.forEach(\n        it => {\n            stat.set(it.location, [it].concat(stat.get(it.location) ?? []))\n        }\n    )\n    return stat\n}\n\n\nexport const collectKeywordsByTimeline = (\n    raw: IMicroblogRecord[],\n    startTime: number,\n    endTime: number,\n    timeWindowInSeconds: number,\n    keywords: string[],\n) => {\n\n    const getIndex = getIndexByTimestamp(startTime, timeWindowInSeconds)\n\n    const statisticLength = getIndex(endTime) + 1\n\n    let keywordStatistics: IKeywordStatistics[] = keywords.map(\n        it => ({\n            keyword: it,\n            statistic: new Array(statisticLength).fill(0)\n        })\n    )\n\n\n    keywordStatistics.forEach(\n        record => {\n            const keyword = record.keyword.toLowerCase();\n            raw.forEach(\n                it => {\n                    if (it.message.toLowerCase().includes(keyword)) {\n                        const index = getIndex(Number(it.date))\n                        record.statistic[index]++;\n                    }\n                }\n            )\n        }\n    )\n\n    return keywordStatistics\n}","import * as d3 from 'd3';\nimport { IMicroblogRecord } from './App';\nimport streetData from './streets.json'\nimport { IKeywordLocationStatistics } from './Utils';\nlet minx = 100\nlet miny = 100\nconst size = 1000\n\ntype D3SvgSelection = d3.Selection<any, any, any, any>\ntype CoordinateRecords = Record<string, string>\n\nexport const pointTranslate = (coordinates: string, dx: number, dy: number, scale: number) => coordinates.split(\" \").map(\n    it => {\n        const cc = it.split(',')\n        const x = parseFloat(cc[0])\n        const y = parseFloat(cc[1])\n        if (minx > x) minx = x\n        if (miny > y) miny = y\n        return `${(x + dx) * scale},${(y + dy) * scale} `\n    }\n).join()\n\n\nexport const tagPointsOfInterests = (\n    svg: D3SvgSelection,\n    coordinateRecords: CoordinateRecords,\n    locationStat: IKeywordLocationStatistics,\n    stripeLayer: D3SvgSelection,\n    kewordsAndCorrespondingColor: {\n        keyword: string,\n        color: string\n    }[],\n    _timeRegion: {\n        start: number,\n        end: number\n    },\n    onClickNode?: (detail: {\n        poiName: string\n    }) => void\n) => {\n    const timeRegion ={\n        start: Math.min(_timeRegion.end,_timeRegion.start),\n        end: Math.max(_timeRegion.end,_timeRegion.start)\n    }\n\n    const poiLayer = svg.select(\"g#poi\")\n        .attr(\"transform\", \"matrix(10,0,0,-10,0,\" + size * 2 / 3 + \")\")\n\n    const parsed = Object.keys(coordinateRecords)\n        .filter(it => coordinateRecords[it] !== '0,0')\n        .map(\n            it => {\n                const [x, y] = coordinateRecords[it].split(',').map(Number)\n                return {\n                    poiName: it, x: (x - 24.82) * 1000, y: (y - 36.04) * 1000\n                }\n            }\n        )\n    const getStatEncoding = (blogs: IMicroblogRecord[]) => {\n        return kewordsAndCorrespondingColor\n            .map(\n                it => ({\n                    ...it,\n                    count: blogs.filter(\n                        blog => {\n                            if (timeRegion.end === timeRegion.start) {\n                                return blog.message.toLowerCase().includes(\n                                    it.keyword.toLowerCase()\n                                )\n                            }\n                            else {\n                                const publishTime = Number(blog.date) % 1000000\n                                return blog.message.toLowerCase().includes(\n                                    it.keyword.toLowerCase()\n                                )\n                                    && (timeRegion.start < publishTime && publishTime < timeRegion.end)\n                            }\n                        }\n                    ).length,\n                })\n            )\n            .sort((a, b) => b.count - a.count)\n    }\n\n    const actualPoiPoints = parsed.map(\n        it => {\n            return {\n                ...it,\n                encoding: getStatEncoding(locationStat.get(it.poiName) ?? []),\n            }\n        }\n    ).filter(it => it.encoding.filter(enc => enc.count > 0).length > 0)\n\n    const circleSelection = poiLayer.selectAll('circle')\n        .data(actualPoiPoints,\n            //@ts-ignore\n            it => it.poiName\n        )\n        .join(\n            enter => {\n                const _enter = enter.append('circle')\n                    .attr('r', 0)\n                    .attr('opacity', 0)\n                    .on(\n                        'click',\n                        (ev, d) => {\n                            onClickNode?.({\n                                poiName: d.poiName,\n                            })\n                        }\n                    )\n                _enter.transition()\n                    .duration(500)\n\n                    .attr('opacity', 1)\n                    .attr('r', it => {\n                        return (it.encoding.map(enc => enc.count)\n                            .reduce((a, b) => a + b) * 0.5) ** 0.5\n                    })\n                return _enter;\n            },\n            update => {\n                return update\n                    .transition()\n                    .duration(500)\n                    .attr('opacity', 1)\n                    .attr('r', it => {\n                        return (it.encoding.map(enc => enc.count)\n                            .reduce((a, b) => a + b) * 0.5) ** 0.5\n                    })\n            },\n            remove => {\n                return remove.transition().duration(500).attr('r', 0).attr('opacity', 0).remove();\n            }\n        )\n        .attr('cx', it => it.x)\n        .attr('cy', it => it.y)\n        .attr('fill', it => it.encoding[0].color)\n\n    // stripeLayer && setTimeout(\n    //     () => {\n    //         circleSelection.call(\n    //             sel => {\n    //                 const { x: originalX, y: originalY } = (stripeLayer.node() as SVGSVGElement).getBoundingClientRect()\n\n    //                 const actualPoiPoints = sel.nodes().map(\n    //                     it => {\n    //                         const rect = it.getBoundingClientRect()\n    //                         return {\n    //                             //@ts-ignore\n    //                             name: it.__data__.poiName,\n    //                             //@ts-ignore\n    //                             encoding: getStatEncoding(locationStat.get(it.__data__.poiName) ?? []),\n    //                             x: rect.x + rect.width / 2 - originalX,\n    //                             y: rect.y + rect.height / 2 - originalY,\n    //                         }\n    //                     }\n    //                 ).filter(it => it.encoding.filter(enc => enc.count > 0).length > 0)\n\n    //                 const yList = actualPoiPoints.map(it => it.y)\n    //                 const minY = Math.min(...yList)\n    //                 const maxY = Math.max(...yList)\n\n    //                 const getLineHeight = (y: number) => 0//180 * (y - maxY) / (maxY - minY) - 60\n\n\n    //                 stripeLayer.append('g')\n    //                     .attr('id', 'stripe-layer')\n    //                     .selectAll('path')\n    //                     .data(actualPoiPoints)\n    //                     .enter()\n    //                     .append('path')\n    //                     .attr('mix-blend-mode', 'multiply')\n    //                     .attr('d', it => `M${it.x} ${it.y}L${it.x} ${it.y + getLineHeight(it.y)}Z`)\n    //                     .attr('stroke', it => it.encoding[0].color)\n\n\n    //             }\n    //         )\n    //     }, 1000\n    // )\n\n    return poiLayer\n}\n\n\nexport const renderMap = (svg: D3SvgSelection) => {\n    const streetDataRenderer = (data: any) => {\n        // const highlight_street = (name: string) => {\n        //     svg.selectAll(\"polyline\")\n        //         .style(\"stroke\", \"black\")\n        //         .style(\"stroke-width\", 0.1)\n        //     name = name.split(\" \").join(\"-\")\n        //     svgg.select(\"g#\" + name).selectAll(\"*\")\n        //         .style(\"stroke\", \"red\")\n        //         .style(\"stroke-width\", 0.25)\n        // }\n\n        const svgg = svg.select(\"g#map\")\n            .attr(\"transform\", \"matrix(10,0,0,-10,0,\" + size * 2 / 3 + \")\")\n        // 放大十倍，同时上下颠倒，并调整y方向偏移量\n\n        for (let group in data) {\n            let g = svgg.append(\"g\")\n                .attr(\"id\", group.split(\" \").join(\"-\"))\n            for (let street in data[group]) {\n                let id = \"\"\n                if (data[group][street][\"name\"] != null)\n                    id = data[group][street][\"name\"].split(\" \").join(\"-\")\n                else\n                    id = \"null\"\n                g.append(\"polyline\")\n                    .attr(\"id\", id)\n                    .attr(\"points\", pointTranslate(data[group][street][\"coordinates\"], -24.82, -36.04, 1000)) // 减去基准量，让地图出现在中间\n                    .style(\"fill\", 'none')\n                    .style(\"stroke\", '#d1d2d6')\n                    .style('stroke-width', 0.15)\n                // .on(\"mouseover\", () => {\n                //     let self = d3.selectAll(\"polyline#\" + id)\n                //     // console.log(self.attr(\"id\"))\n                //     self.style(\"stroke\", \"blue\")\n                //         .style(\"stroke-width\", 0.3)\n                // })\n                // .on(\"mouseout\", () => {\n                //     let self = d3.selectAll(\"polyline#\" + id)\n                //     self.style(\"stroke\", \"#e1e2e6\")\n                //         .style(\"stroke-width\", 0.1)\n                // })\n                // .on(\"click\", () => {\n                //     highlight_street(group)\n                // })\n            }\n        }\n    }\n    streetDataRenderer(streetData)\n}","export const MapOutline =<path fill=\"#f1f2f6\" transform=\"translate(84,58)\" d=\"M816,485.4c0.1,0,0.2,0,0.2,0c0.4-0.1,0.7-0.1,1.1-0.2c0.1,0,0.1,0,0.2,0c0.1,0,0.1,0,0.2-0.1\nc0.2-0.1,0.4-0.1,0.6-0.2c0.1,0,0.3-0.1,0.4-0.2c0.2-0.1,0.3-0.2,0.5-0.2c0.1-0.1,0.3-0.1,0.4-0.2c0.2-0.1,0.3-0.2,0.4-0.3\nc0.1-0.1,0.3-0.2,0.4-0.3c0.1-0.1,0.3-0.2,0.4-0.3c0.1-0.1,0.3-0.2,0.4-0.3c0.1-0.1,0.2-0.2,0.3-0.3c0.1-0.1,0.3-0.2,0.4-0.4\nc0.1-0.1,0.2-0.2,0.3-0.3c0.1-0.1,0.2-0.3,0.3-0.4c0.1-0.1,0.2-0.3,0.3-0.4c0.1-0.1,0.2-0.3,0.3-0.4c0.1-0.1,0.2-0.3,0.3-0.4\nc0.1-0.1,0.1-0.3,0.2-0.4c0.1-0.2,0.2-0.3,0.2-0.5c0.1-0.1,0.1-0.3,0.2-0.4c0.1-0.2,0.1-0.3,0.2-0.5c0-0.1,0.1-0.3,0.1-0.4\nc0.1-0.2,0.1-0.3,0.1-0.5c0-0.1,0.1-0.3,0.1-0.4c0-0.2,0.1-0.3,0.1-0.5c0-0.2,0-0.3,0.1-0.5c0-0.1,0-0.3,0-0.5c0-0.2,0-0.4,0-0.6\nc0-0.1,0-0.3,0-0.4c0-0.2,0-0.4,0-0.6c0-0.1,0-0.1,0-0.2c0-0.1,0-0.2,0-0.3c0-0.2-0.1-0.4-0.1-0.5c0-0.2-0.1-0.3-0.1-0.5\nc0-0.1,0-0.2-0.1-0.3l-2.9-9.5l-1.9-9.5c0-0.1,0-0.2-0.1-0.3c0,0,0-0.1,0-0.1c0-0.1,0-0.1,0-0.2l0-0.1c0,0,0-0.1,0-0.1l-3.9-14.8\nc0-0.1-0.1-0.2-0.1-0.4c0-0.2-0.1-0.3-0.1-0.5c0-0.1,0-0.1-0.1-0.2c0-0.1-0.1-0.2-0.1-0.3c-0.1-0.2-0.1-0.3-0.2-0.5\nc-0.1-0.1-0.1-0.3-0.2-0.4c-0.1-0.1-0.2-0.3-0.2-0.4c0-0.1-0.1-0.2-0.1-0.2c0,0,0,0,0-0.1c0,0,0-0.1-0.1-0.1\nc-0.1-0.1-0.2-0.3-0.3-0.4c0,0,0,0,0,0l0.2-0.3c0,0,0,0,0-0.1l0-0.1l5.9-8.9c0,0,0,0,0-0.1l0-0.1c0,0,0-0.1,0-0.1\nc0.1-0.2,0.3-0.4,0.4-0.7c0-0.1,0.1-0.2,0.1-0.3c0.1-0.2,0.2-0.4,0.3-0.5c0-0.1,0.1-0.2,0.1-0.3c0,0,0,0,0-0.1\nc0-0.1,0.1-0.2,0.1-0.2c0.1-0.2,0.2-0.4,0.2-0.7c0-0.1,0.1-0.2,0.1-0.4c0-0.2,0.1-0.4,0.1-0.6c0-0.2,0-0.3,0.1-0.5\nc0-0.2,0-0.3,0.1-0.5c0-0.2,0-0.4,0-0.5c0-0.1,0-0.3,0-0.4c0-0.2,0-0.4,0-0.6c0-0.1,0-0.3,0-0.4c0-0.2-0.1-0.4-0.1-0.5\nc0-0.1,0-0.3-0.1-0.4c0-0.2-0.1-0.3-0.1-0.5c0-0.2-0.1-0.3-0.1-0.4c0-0.1-0.1-0.3-0.2-0.4c-0.1-0.2-0.1-0.3-0.2-0.5\nc-0.1-0.1-0.1-0.2-0.2-0.4c-0.1-0.2-0.2-0.3-0.3-0.5c-0.1-0.1-0.1-0.2-0.2-0.3c-0.1-0.2-0.2-0.3-0.3-0.5c-0.1-0.1-0.2-0.2-0.2-0.3\nc-0.1-0.1-0.2-0.3-0.3-0.4c-0.1-0.1-0.2-0.2-0.3-0.4c-0.1-0.1-0.2-0.2-0.3-0.3c-0.1-0.1-0.3-0.3-0.4-0.4c-0.1-0.1-0.2-0.2-0.3-0.3\nc-0.2-0.1-0.4-0.3-0.5-0.4c-0.1-0.1-0.1-0.1-0.2-0.2c0,0,0,0-0.1,0c-0.2-0.1-0.3-0.2-0.5-0.3c-0.1-0.1-0.3-0.2-0.4-0.2\nc-0.1-0.1-0.2-0.1-0.4-0.2c-0.2-0.1-0.4-0.2-0.6-0.3c0,0,0,0-0.1,0l-1.2-0.5l5.5-7c0.1-0.1,0.2-0.3,0.3-0.4c0,0,0.1-0.1,0.1-0.1\nc0.1-0.1,0.1-0.2,0.2-0.3c0-0.1,0.1-0.1,0.1-0.2c0.1-0.2,0.2-0.4,0.3-0.6c0,0,0-0.1,0.1-0.1c0,0,0,0,0,0l0,0c0,0,0-0.1,0-0.1\nl1.9-3.9c0.2-0.3,0.3-0.6,0.4-0.9c0-0.1,0.1-0.2,0.1-0.3c0.1-0.2,0.1-0.4,0.2-0.6c0-0.2,0.1-0.3,0.1-0.5c0-0.1,0.1-0.2,0.1-0.3\nl1-4.8c0,0,0,0,0,0l0-0.1c0-0.1,0-0.2,0-0.3c0-0.1,0-0.1,0-0.2c0-0.1,0-0.2,0.1-0.3c0,0,0-0.1,0-0.1c0-0.1,0-0.2,0-0.4\nc0-0.1,0-0.1,0-0.2c0-0.1,0-0.2,0-0.3c0,0,0-0.1,0-0.1c0-0.1,0-0.3,0-0.4c0-0.1,0-0.3,0-0.4c0,0,0-0.1,0-0.1c0-0.2,0-0.3-0.1-0.5\nc0-0.1,0-0.2,0-0.4c0,0,0-0.1,0-0.1c0-0.2-0.1-0.3-0.1-0.5c0-0.1,0-0.2-0.1-0.3c0,0,0-0.1,0-0.1c0-0.2-0.1-0.3-0.2-0.5\nc0-0.1-0.1-0.2-0.1-0.4c0,0,0,0,0-0.1l-4-10c0-0.1-0.1-0.2-0.1-0.3c-0.1-0.2-0.1-0.3-0.2-0.5c0,0,0,0,0,0l-2-4c0,0,0,0,0,0\nc0,0-0.1-0.1-0.1-0.1c-0.1-0.2-0.2-0.3-0.3-0.5c0-0.1-0.1-0.2-0.1-0.2c0-0.1-0.1-0.1-0.1-0.2c-0.1-0.1-0.2-0.2-0.2-0.3\nc-0.1-0.1-0.1-0.2-0.2-0.3c-0.1-0.1-0.1-0.2-0.2-0.2c0,0-0.1-0.1-0.1-0.1l-1.9-2.3c1.3-0.9,2.5-2.1,3.3-3.7\nc2.5-4.9,0.6-10.9-4.3-13.5l-38.3-19.6c0,0,0,0,0,0l-2.7-1.4c-0.5-0.3-1-0.5-1.6-0.6L733,314.1c-0.1,0-0.1,0-0.2-0.1\nc-0.1,0-0.1,0-0.2-0.1l-30.6-8.2l-0.3-0.3l-3.9-4c-1.3-1.3-2.9-2.3-4.8-2.7l-23.8-6c0,0,0,0,0,0l-0.1,0c-0.1,0-0.2,0-0.3-0.1\nc0,0,0,0-0.1,0c-0.1,0-0.2,0-0.3-0.1l-0.2,0c0,0,0,0,0,0l-15.8-3c-0.1,0-0.2,0-0.2,0l-22.6-3.7c0,0,0,0,0,0l-5.1-0.8c0,0,0,0,0,0\nl-13.5-2.2l-61.4-35.1c-0.2-0.1-0.3-0.2-0.5-0.3l-3.8-1.9l-109.7-61.8l-41.5-35c-0.1-0.1-0.1-0.1-0.2-0.2l-33.4-26.6c0,0,0,0,0,0\nl-0.1-0.1c-0.1-0.1-0.2-0.1-0.2-0.2c-0.2-0.1-0.3-0.3-0.5-0.4c-0.2-0.1-0.4-0.2-0.5-0.3c-0.1-0.1-0.2-0.1-0.3-0.2l-0.1,0\nc0,0,0,0,0,0l-31-16.2c-0.6-0.3-1.2-0.6-1.9-0.8c-0.5-0.1-1-0.2-1.4-0.3l-39.2-19.1c0,0,0,0,0,0l-0.1-0.1c-0.1-0.1-0.3-0.1-0.4-0.2\nc-0.1-0.1-0.3-0.1-0.4-0.2l-0.1,0l-15.5-5.9c0,0,0,0,0,0l-0.2-0.1c-0.1,0-0.2-0.1-0.3-0.1c-0.2-0.1-0.4-0.1-0.6-0.2\nc-0.2-0.1-0.4-0.1-0.5-0.1c-0.1,0-0.2-0.1-0.4-0.1l-11.9-2.2l-10.2-1.9l-1.4-5.7c0,0,0,0,0,0l0-0.2c0-0.1,0-0.2-0.1-0.2c0,0,0,0,0,0\nc0-0.1-0.1-0.3-0.1-0.4c0-0.1,0-0.1-0.1-0.2c0,0,0,0,0,0c0,0,0,0,0,0c0,0,0,0,0,0c0-0.1-0.1-0.2-0.1-0.3c-0.1-0.1-0.1-0.3-0.2-0.4\nc0,0,0-0.1-0.1-0.1c0,0,0-0.1,0-0.1c0-0.1-0.1-0.2-0.1-0.3c-0.1-0.1-0.1-0.3-0.2-0.4c0,0,0-0.1-0.1-0.1c0,0,0-0.1-0.1-0.1\nc0-0.1-0.1-0.2-0.2-0.2c-0.1-0.1-0.2-0.2-0.2-0.4c0,0,0-0.1-0.1-0.1c0-0.1-0.1-0.1-0.1-0.2c-0.1-0.1-0.1-0.1-0.2-0.2\nc-0.1-0.1-0.2-0.2-0.3-0.3c0,0,0,0-0.1-0.1c0-0.1-0.1-0.1-0.1-0.2c0-0.1-0.1-0.1-0.2-0.2c-0.1-0.1-0.2-0.2-0.3-0.3\nc0,0-0.1-0.1-0.1-0.1c0,0-0.1-0.1-0.1-0.1c0,0-0.1-0.1-0.1-0.1c-0.1-0.1-0.2-0.2-0.3-0.3c0,0-0.1-0.1-0.1-0.1c0,0-0.1-0.1-0.1-0.1\nc0,0-0.1-0.1-0.1-0.1c-0.1-0.1-0.3-0.2-0.4-0.3c0,0-0.1-0.1-0.1-0.1c0,0-0.1-0.1-0.1-0.1c0,0-0.1,0-0.1-0.1\nc-0.1-0.1-0.3-0.2-0.4-0.3c-0.1,0-0.1-0.1-0.2-0.1c0,0-0.1,0-0.1-0.1c0,0-0.1,0-0.1-0.1c-0.2-0.1-0.3-0.2-0.5-0.2c0,0-0.1,0-0.1-0.1\nc0,0-0.1,0-0.1-0.1c0,0-0.1,0-0.1,0c-0.2-0.1-0.3-0.1-0.5-0.2c0,0-0.1,0-0.1,0c0,0-0.1,0-0.1,0c-0.1,0-0.1,0-0.2,0\nc-0.2,0-0.4-0.1-0.5-0.1c0,0-0.1,0-0.1,0c-0.1,0-0.1,0-0.2,0c-0.1,0-0.1,0-0.2,0c-0.2,0-0.3,0-0.5-0.1c-0.1,0-0.1,0-0.2,0l-19.6-1.6\nc-0.1,0-0.1,0-0.2,0c-0.1,0-0.1,0-0.2,0c-0.1,0-0.1,0-0.2,0c-0.1,0-0.1,0-0.2,0h-14c0,0,0,0,0,0c0,0,0,0,0,0l-13.6,0l-13.4,0\nc0,0,0,0,0,0c0,0,0,0,0,0h-13c-5.5,0-10,4.5-10,10v2h-4h-3v-10c0-0.1,0-0.2,0-0.2c0-0.2,0-0.4,0-0.6c0-0.1,0-0.3,0-0.4\nc0-0.2,0-0.4-0.1-0.5c0-0.2-0.1-0.4-0.1-0.5c0-0.1-0.1-0.3-0.1-0.4c-0.1-0.2-0.1-0.4-0.2-0.6c0-0.1,0-0.1-0.1-0.2c0,0,0-0.1,0-0.1\nc-0.1-0.2-0.2-0.4-0.3-0.6c-0.1-0.1-0.1-0.2-0.2-0.3c-0.1-0.2-0.2-0.3-0.3-0.5c-0.1-0.1-0.2-0.3-0.2-0.4c-0.1-0.1-0.2-0.2-0.3-0.4\nc-0.1-0.2-0.2-0.3-0.3-0.4c-0.1-0.1-0.2-0.2-0.2-0.3c-0.1-0.2-0.3-0.3-0.4-0.5c-0.1-0.1-0.2-0.2-0.3-0.2c-0.1-0.1-0.3-0.3-0.4-0.4\nc-0.1-0.1-0.2-0.2-0.3-0.3c-0.1-0.1-0.3-0.2-0.4-0.3c-0.1-0.1-0.3-0.2-0.5-0.3c-0.1-0.1-0.2-0.1-0.3-0.2c-0.2-0.1-0.4-0.2-0.6-0.3\nc-0.1,0-0.2-0.1-0.3-0.1c-0.2-0.1-0.4-0.2-0.6-0.2c-0.1,0-0.2-0.1-0.3-0.1c-0.2-0.1-0.4-0.1-0.5-0.2c-0.1,0-0.3-0.1-0.4-0.1\nc-0.2,0-0.3-0.1-0.5-0.1c-0.2,0-0.4-0.1-0.5-0.1c-0.1,0-0.3,0-0.4,0c-0.2,0-0.4,0-0.6,0c0,0-0.1,0-0.1,0c-0.1,0-0.2,0-0.2,0\nc-0.2,0-0.4,0-0.6,0c-0.1,0-0.3,0-0.4,0c-0.2,0-0.4,0-0.5,0.1c-0.2,0-0.4,0.1-0.5,0.1c-0.1,0-0.3,0.1-0.4,0.1\nc-0.2,0.1-0.4,0.1-0.6,0.2c-0.1,0-0.1,0-0.2,0.1l-12.8,4.9c0,0-0.1,0-0.1,0l-0.1,0c0,0-0.1,0-0.1,0c-0.1,0.1-0.3,0.1-0.4,0.2\nc-0.1,0-0.2,0.1-0.3,0.1c-0.1,0-0.1,0.1-0.2,0.1c-0.1,0.1-0.3,0.1-0.4,0.2c-0.1,0.1-0.2,0.1-0.3,0.2c-0.1,0-0.1,0.1-0.2,0.1\nc-0.1,0.1-0.2,0.2-0.3,0.2c0,0,0,0-0.1,0c-0.1,0-0.1,0.1-0.2,0.1l-0.1,0.1c0,0,0,0-0.1,0l-8.1,6.2l-9.2-4.3L92.3,57l-6.5-4.5\nc-0.1-0.1-0.2-0.1-0.2-0.1c-0.2-0.1-0.3-0.2-0.5-0.3c-0.1-0.1-0.3-0.1-0.4-0.2c-0.2-0.1-0.3-0.2-0.5-0.2c-0.1-0.1-0.3-0.1-0.4-0.2\nc-0.2-0.1-0.3-0.1-0.5-0.2c-0.2-0.1-0.3-0.1-0.5-0.1c-0.1,0-0.3-0.1-0.4-0.1c-0.2,0-0.4-0.1-0.6-0.1c-0.1,0-0.3,0-0.4-0.1\nc-0.2,0-0.4,0-0.6-0.1c-0.1,0-0.3,0-0.4,0c-0.2,0-0.4,0-0.6,0c-0.1,0-0.2,0-0.3,0l-25.8,1.7l-0.6,0c0,0-0.1,0-0.1,0c0,0,0,0,0,0\nc0,0,0,0,0,0c-0.3,0-0.7,0-1,0.1c0,0-0.1,0-0.1,0c-0.3,0-0.6,0.1-0.9,0.1c-0.1,0-0.2,0.1-0.3,0.1c-0.2,0.1-0.4,0.1-0.6,0.2\nc-0.1,0-0.3,0.1-0.4,0.1c-0.2,0.1-0.4,0.1-0.5,0.2c-0.1,0.1-0.3,0.1-0.4,0.2c-0.1,0.1-0.3,0.1-0.4,0.2c-0.1,0.1-0.3,0.2-0.4,0.2\nc-0.1,0.1-0.3,0.2-0.4,0.2c-0.1,0.1-0.3,0.2-0.4,0.3c-0.1,0.1-0.3,0.2-0.4,0.3c-0.1,0.1-0.2,0.2-0.4,0.3c-0.1,0.1-0.2,0.2-0.4,0.3\nc-0.1,0.1-0.2,0.2-0.3,0.3c-0.1,0.1-0.2,0.2-0.3,0.4c-0.1,0.1-0.2,0.2-0.3,0.4c-0.1,0.1-0.2,0.3-0.3,0.4c-0.1,0.1-0.2,0.3-0.2,0.4\nc-0.1,0.1-0.2,0.3-0.3,0.4c0,0,0,0,0,0.1c-0.4-0.3-0.8-0.5-1.2-0.7l-3.2-1.8c-0.9-0.5-2-0.9-3-1.1l-5.2-0.9c-0.3-0.1-0.7-0.1-1-0.1\nL26,52.8l-3-0.6l-4.3-1.8c-5.1-2.2-11,0.2-13.1,5.3c-1.3,3.1-0.9,6.6,0.8,9.3c0,0-0.1,0-0.1,0l-1.9,0.8c-1.1,0.5-2.1,1.1-3,2\nl-1.7,1.6c0,0,0,0-0.1,0l-0.1,0.1c-0.1,0.1-0.1,0.1-0.2,0.2c-0.2,0.2-0.3,0.3-0.5,0.5c-0.1,0.1-0.2,0.3-0.3,0.4\nc-0.1,0.1-0.2,0.2-0.3,0.4c-0.1,0.2-0.3,0.4-0.4,0.6c0,0.1-0.1,0.1-0.1,0.2l0,0.1c0,0,0,0,0,0.1L-4,74.7c0,0,0,0,0,0c0,0,0,0,0,0\nl-0.4,0.8c-1.2,2-1.6,4.4-1.2,6.7l0.3,2c0.4,2,1.3,3.8,2.7,5.2c0.1,0.3,0.2,0.6,0.3,0.9l1.8,4.2c0.8,1.9,2.2,3.5,3.9,4.6l0.4,0.3\nc0.2,1.1,0.6,2.1,1.2,3.1l1,1.6c0.2,0.4,0.5,0.8,0.8,1.1l1.1,1.4l1.3,1.8c2,2.7,5,4.1,8.1,4.1c0.6,0,1.2-0.1,1.9-0.2\nc1,4.7,5.1,8,9.8,8c0.6,0,1.1,0,1.7-0.1c1.6-0.3,3.1-1,4.4-1.9c1.1,0.4,2.2,0.6,3.3,0.6c2,0,3.9-0.6,5.6-1.7l0.1,7.9c0,0,0,0,0,0\nl0,4.7c0,0,0,0,0,0.1c0,0.2,0,0.5,0,0.7c0,0.1,0,0.2,0,0.3c0,0.2,0.1,0.4,0.1,0.6c0,0.1,0,0.2,0.1,0.4c0,0.2,0.1,0.3,0.1,0.5\nc0,0.2,0.1,0.3,0.1,0.5c0,0.1,0.1,0.2,0.1,0.3c0.1,0.2,0.1,0.4,0.2,0.6c0,0.1,0.1,0.2,0.1,0.2c0.1,0.2,0.2,0.4,0.3,0.6\nc0,0.1,0.1,0.1,0.1,0.2c0.1,0.2,0.2,0.4,0.4,0.6c0.1,0.1,0.1,0.2,0.2,0.3c0.1,0.2,0.2,0.3,0.4,0.5c0.1,0.1,0.2,0.2,0.3,0.4\nc0.1,0.1,0.2,0.2,0.3,0.3c0.1,0.1,0.3,0.3,0.4,0.4c0.1,0.1,0.2,0.2,0.3,0.2c0.2,0.1,0.3,0.2,0.5,0.4c0.1,0.1,0.2,0.1,0.3,0.2\nc0.2,0.1,0.3,0.2,0.5,0.3c0.1,0.1,0.2,0.1,0.4,0.2c0.1,0.1,0.3,0.1,0.4,0.2c0.2,0.1,0.3,0.2,0.5,0.2c0.1,0,0.2,0.1,0.4,0.1\nc0.2,0.1,0.4,0.1,0.6,0.2c0.1,0,0.2,0.1,0.3,0.1c0.2,0.1,0.4,0.1,0.6,0.2c0,0,0.1,0,0.1,0l4.1,0.7l0.2,1.1c-4,1.6-6.7,5.7-6.3,10.2\nc0.2,1.7,0.7,3.2,1.5,4.5l-0.1,1.4c-0.3,5.5,3.9,10.3,9.4,10.6c0.2,0,0.4,0,0.6,0c0.1,0,0.3,0,0.4,0l0.7,13.1c0,0,0,0,0,0\nc0,0,0,0.1,0,0.1c0,0,0,0,0,0l0.3,4.8c0.3,4.3,3.2,7.7,7,8.9l-0.3,2.8l-1.1-0.1l-1-0.1c0,0,0,0,0,0c0,0,0,0,0,0l-5.7-0.5l-4-2.1\nc-1.7-0.9-3.6-1.3-5.5-1.1l-4.6,0.4c-5.5,0.5-9.6,5.3-9.1,10.8c0.1,1.1,0.4,2.1,0.8,3.1l-0.4,19.8c0,0,0,0.1,0,0.1c0,0,0,0.1,0,0.1\nc0,0.1,0,0.3,0,0.4c0,0.2,0,0.3,0,0.5c0,0.2,0,0.3,0.1,0.5c0,0.2,0,0.3,0.1,0.5c0,0.2,0.1,0.3,0.1,0.5c0,0.2,0.1,0.3,0.1,0.5\nc0,0.2,0.1,0.3,0.2,0.5c0.1,0.1,0.1,0.3,0.2,0.4c0.1,0.2,0.1,0.3,0.2,0.5c0.1,0.1,0.1,0.3,0.2,0.4c0.1,0.2,0.2,0.3,0.3,0.4\nc0.1,0.1,0.2,0.3,0.2,0.4c0.1,0.1,0.2,0.3,0.3,0.4c0.1,0.1,0.2,0.2,0.3,0.4c0.1,0.1,0.2,0.3,0.3,0.4c0.1,0.1,0.2,0.2,0.3,0.3\nc0.1,0.1,0.2,0.2,0.4,0.3c0.1,0.1,0.2,0.2,0.3,0.3c0.1,0.1,0.3,0.2,0.4,0.3c0.1,0.1,0.2,0.2,0.4,0.3c0.1,0.1,0.3,0.2,0.4,0.3\nc0.1,0.1,0.3,0.2,0.4,0.2c0.1,0.1,0.3,0.2,0.4,0.2c0.1,0.1,0.3,0.1,0.4,0.2c0.2,0.1,0.3,0.1,0.5,0.2c0.1,0.1,0.3,0.1,0.4,0.2\nc0.2,0.1,0.3,0.1,0.5,0.1c0.1,0,0.3,0.1,0.4,0.1c0.2,0,0.4,0.1,0.5,0.1c0.2,0,0.3,0.1,0.5,0.1c0.2,0,0.4,0,0.5,0c0.1,0,0.3,0,0.4,0\nc0,0,0.1,0,0.1,0c0,0,0,0,0,0l11.3,0.1l-0.1,0.6c-1.4,0.1-2.8,0.5-4.2,1.3c-2.2,1.2-3.7,3.1-4.5,5.3l-3.3,0.5\nc-5.5,0.8-9.3,5.8-8.5,11.3c0.7,5,5,8.6,9.9,8.6c0.5,0,0.9,0,1.4-0.1l13.8-2c0,0,0,0,0.1,0l0.1,0c0.1,0,0.2,0,0.3-0.1\nc0.1,0,0.2,0,0.3,0l5-1c0,0,0,0,0,0c0.1,0,0.1,0,0.2-0.1c0.2,0,0.3-0.1,0.5-0.1c0.1,0,0.3-0.1,0.4-0.1c0,0,0,0,0.1,0l3-1\nc0.9-0.3,1.7-0.7,2.5-1.2l7.5-5.1c1.6,1.2,3.7,1.9,5.8,1.9c1.7,0,3.2-0.4,4.6-1.1l-0.4,5l-2.4,6.9c0,0,0,0,0,0L85.6,287l-3,4.6\nc0,0,0,0,0,0c0,0,0,0,0,0l-3.7,5.6c0,0,0,0,0,0c0,0,0,0,0,0l-4.9,7.6l-2.6-1.7l-1.9-1.7l-0.4-0.4c-0.9-5.3-5.8-9.1-11.2-8.3\nc-5.5,0.7-9.3,5.8-8.6,11.2l0.2,1.7c0.1,1.1,0.5,2.1,0.9,3.1l0.8,1.7c0.3,0.6,0.7,1.2,1.1,1.8l1.9,2.4c0.4,0.5,0.8,0.9,1.2,1.3\nl3.1,2.7c0.4,0.3,0.7,0.6,1.1,0.9l4.4,2.9c0.3,0.2,0.7,0.4,1,0.6l3.6,1.8l-0.2,6.1l-12.7,0.9c-1.7-3-4.9-5-8.5-5l-13.4-0.2\nc-0.7-0.7-1.5-1.3-2.3-1.7l-12-6.5c-0.1-0.1-0.3-0.1-0.4-0.2c-0.1-0.1-0.3-0.1-0.4-0.2c-0.2-0.1-0.4-0.1-0.5-0.2\nc-0.1,0-0.2-0.1-0.4-0.1c-0.1,0-0.1,0-0.2-0.1c-0.2,0-0.3-0.1-0.5-0.1c-0.1,0-0.2-0.1-0.3-0.1l-7.1-1.6l-4.2-4.9\nc0,0-0.1-0.1-0.1-0.1c-0.1-0.1-0.2-0.3-0.4-0.4c-0.1-0.1-0.2-0.2-0.4-0.4c0,0-0.1-0.1-0.1-0.1c-0.1-0.1-0.2-0.1-0.2-0.2\nc-0.1-0.1-0.3-0.2-0.5-0.4c-0.1-0.1-0.2-0.2-0.4-0.2c-0.2-0.1-0.3-0.2-0.5-0.3c-0.1-0.1-0.3-0.2-0.4-0.2c-0.1-0.1-0.3-0.2-0.4-0.2\nc-0.2-0.1-0.3-0.1-0.5-0.2c-0.1-0.1-0.3-0.1-0.4-0.2c-0.2-0.1-0.3-0.1-0.5-0.2c-0.1,0-0.3-0.1-0.4-0.1c-0.2,0-0.3-0.1-0.5-0.1\nc-0.1,0-0.3-0.1-0.4-0.1c-0.2,0-0.3,0-0.5-0.1c-0.2,0-0.3,0-0.5,0c-0.2,0-0.3,0-0.5,0c-0.2,0-0.3,0-0.5,0c-0.2,0-0.3,0-0.5,0\nc-0.2,0-0.3,0-0.5,0.1c-0.1,0-0.3,0-0.4,0.1c-0.2,0-0.3,0.1-0.5,0.1c-0.1,0-0.3,0.1-0.4,0.1c-0.2,0-0.3,0.1-0.5,0.2\nc-0.1,0-0.3,0.1-0.4,0.2c-0.2,0.1-0.3,0.1-0.5,0.2c-0.2,0.1-0.3,0.1-0.4,0.2c-0.1,0.1-0.3,0.1-0.4,0.2c-0.2,0.1-0.3,0.2-0.5,0.3\nc-0.1,0.1-0.2,0.2-0.4,0.2c-0.2,0.1-0.3,0.2-0.5,0.4c-0.1,0.1-0.2,0.1-0.2,0.2c0,0-0.1,0.1-0.1,0.1c-0.1,0.1-0.3,0.2-0.4,0.4\nc-0.1,0.1-0.3,0.2-0.4,0.4c0,0-0.1,0.1-0.1,0.1l-15.4,17.2c-0.7,0.8-1.3,1.7-1.7,2.7l-3,7c0,0.1,0,0.1-0.1,0.2c0,0,0,0,0,0.1l-1.6,4\nl-7.4,11.1c0,0,0,0,0,0.1c-0.1,0.1-0.2,0.3-0.3,0.4c-0.1,0.1-0.1,0.2-0.2,0.3c0,0.1-0.1,0.1-0.1,0.2c-0.1,0.1-0.1,0.3-0.2,0.4\nc0,0.1-0.1,0.2-0.1,0.3c-3.1,0.4-5.9,2.2-7.5,5.1l-5,9c0,0,0,0,0,0c0,0.1-0.1,0.2-0.1,0.3c-0.1,0.1-0.1,0.2-0.2,0.4\nc0,0.1-0.1,0.1-0.1,0.2c0,0,0,0,0,0.1c0,0.1-0.1,0.2-0.1,0.2c-0.1,0.1-0.1,0.3-0.1,0.4c0,0.1,0,0.1-0.1,0.2c0,0,0,0.1,0,0.1\nc0,0.1,0,0.2-0.1,0.2c0,0.1-0.1,0.3-0.1,0.4c0,0.1-0.1,0.2-0.1,0.3c0,0,0,0,0,0.1c0,0.1,0,0.1,0,0.2c0,0.1,0,0.3-0.1,0.4\nc0,0.1,0,0.2-0.1,0.4c0,0,0,0,0,0.1c0,0.1,0,0.1,0,0.2c0,0.1,0,0.1,0,0.2l-1,17c0,0,0,0,0,0.1c0,0,0,0.1,0,0.1c0,0.1,0,0.2,0,0.3\nc0,0.1,0,0.2,0,0.3c0,0.1,0,0.2,0,0.3c0,0,0,0.1,0,0.1c0,0,0,0,0,0l1,15l1,17.9c0,0,0,0,0,0l1,18.7v17.7c0,3.8,2.1,7.1,5.2,8.8\nc-0.5,1.1-0.8,2.2-0.9,3.3l-0.5,0.2c-5.3,1.6-8.3,7.1-6.7,12.4c1.3,4.3,5.3,7.2,9.6,7.2c0.5,0,1.1-0.1,1.6-0.1\nc0.6,0.3,1.2,0.6,1.8,0.8l6,2.1c-0.9,1.9-1.3,4.1-0.8,6.4l0.9,4.3l0.4,8.8h-0.5c-5.5,0-10,4.5-10,10v10c-2.4,1.8-4,4.7-4,8\nc0,5.5,4.5,10,10,10h4h12h13h15c0,0,0,0,0,0c0.2,0,0.4,0,0.5,0c0,0,0.1,0,0.1,0c0,0,0.1,0,0.1,0l12.3-0.9l13.3,0.9\nc0.2,0,0.5,0,0.7,0c0,0,0,0,0,0h13h6.4v1.6c0,4.1,2.4,7.6,5.9,9.1c1.8,2.9,4.9,4.8,8.5,4.8c0,0,0.1,0,0.1,0l9.1-0.1c0,0,0,0,0,0\nc0,0,0,0,0,0l0.1,0c0,0,0,0,0,0c0,0,0.1,0,0.1,0l13-0.3c3-0.1,5.8-1.5,7.6-3.8c0.4-0.5,0.7-1,1-1.5c0.1,0,0.1-0.1,0.2-0.1\nc0.1-0.1,0.3-0.2,0.4-0.3c0.1-0.1,0.2-0.2,0.4-0.3c0.1-0.1,0.3-0.2,0.4-0.3c0.1-0.1,0.2-0.2,0.3-0.3c0.1-0.1,0.2-0.2,0.4-0.3\nc0.1-0.1,0.2-0.2,0.3-0.3c0.1-0.1,0.2-0.2,0.3-0.4c0.1-0.1,0.2-0.3,0.3-0.4c0.1-0.1,0.2-0.3,0.3-0.4c0.1-0.1,0.2-0.3,0.3-0.4\nc0.1-0.1,0.2-0.3,0.2-0.4c0.1-0.1,0.1-0.3,0.2-0.4c0.1-0.1,0.1-0.3,0.2-0.4c0.1-0.2,0.1-0.3,0.2-0.5c0.1-0.2,0.1-0.3,0.2-0.5\nc0-0.2,0.1-0.3,0.1-0.5c0-0.2,0.1-0.3,0.1-0.5c0-0.2,0.1-0.3,0.1-0.5c0-0.2,0.1-0.4,0.1-0.5c0-0.2,0-0.3,0-0.5c0-0.2,0-0.4,0-0.5\nc0-0.1,0-0.1,0-0.2l0-0.9h5.2c0.1,0,0.1,0,0.2,0c0.2,0,0.5,0,0.7,0c0.1,0,0.2,0,0.3,0c0.2,0,0.4-0.1,0.6-0.1c0.1,0,0.2,0,0.3-0.1\nc0.2,0,0.4-0.1,0.6-0.2c0.1,0,0.2-0.1,0.3-0.1c0.2-0.1,0.5-0.2,0.7-0.3c0.1,0,0.1,0,0.2-0.1c0,0,0,0,0,0l3.1,0.8\nc0.8,0.2,1.6,0.3,2.4,0.3c0.2,0,0.4,0,0.6,0l3.8-0.2c0.8,0,1.5-0.2,2.3-0.4l6.2-1.8c2.5-0.7,4.6-2.4,5.9-4.7l2.2-4\nc0.4-0.7,0.7-1.5,0.9-2.3l1-3.5c1.4-5.3-1.7-10.8-7.1-12.3c-5.3-1.4-10.8,1.7-12.3,7.1l-0.5,1.7l-0.9,0.3l-1.1,0.1l-2.3-0.6\nc-0.2-0.1-0.5-0.1-0.7-0.2l-1.9-0.3c-0.8-0.1-1.7-0.2-2.5-0.1l-2.7,0.2c-1,0.1-2.1,0.3-3,0.7h-9.3c2.4-1.8,4-4.7,4-8\nc0-4-2.3-7.4-5.7-9h54.9l0.7,25.3c0,0.1,0,0.1,0,0.2c0,0.2,0,0.4,0,0.6c0,0.1,0,0.3,0.1,0.4c0,0.2,0.1,0.4,0.1,0.5\nc0,0.1,0.1,0.3,0.1,0.4c0,0.2,0.1,0.3,0.1,0.5c0,0.2,0.1,0.3,0.2,0.5c0.1,0.1,0.1,0.3,0.2,0.4c0.1,0.2,0.1,0.3,0.2,0.5\nc0.1,0.1,0.1,0.3,0.2,0.4c0.1,0.2,0.2,0.3,0.3,0.5c0.1,0.1,0.1,0.2,0.2,0.4c0.1,0.1,0.2,0.3,0.3,0.4c0.1,0.1,0.2,0.2,0.3,0.3\nc0.1,0.1,0.2,0.3,0.3,0.4c0.1,0.1,0.2,0.2,0.3,0.3c0.1,0.1,0.2,0.2,0.3,0.3c0.1,0.1,0.2,0.2,0.4,0.3c0.1,0.1,0.2,0.2,0.3,0.3\nc0.1,0.1,0.3,0.2,0.4,0.3c0.1,0.1,0.2,0.2,0.4,0.2c0.1,0.1,0.3,0.2,0.4,0.3c0.1,0.1,0.3,0.1,0.4,0.2c0.1,0.1,0.3,0.1,0.4,0.2\nc0.2,0.1,0.3,0.1,0.5,0.2c0.1,0.1,0.3,0.1,0.4,0.1c0.2,0.1,0.4,0.1,0.6,0.2c0.1,0,0.2,0.1,0.4,0.1c0.2,0,0.4,0.1,0.6,0.1\nc0.1,0,0.2,0,0.3,0.1l4.9,0.6c1.4,3.8,5.1,6.5,9.3,6.5c0.1,0,0.1,0,0.2,0l14-0.2c1.3,0,2.5-0.3,3.6-0.7l1.7,1.9\nc2,2.2,4.7,3.3,7.4,3.3c1,0,2-0.2,2.9-0.4c0.3,0,0.7,0,1,0h6.2c1.7,1.3,3.8,2.1,6.1,2.1c0,0,0.1,0,0.1,0c3.1,0,5.9-1.5,7.7-3.8h10.1\nh16h9.1c0.5,5.1,4.8,9,9.9,9c5.5,0,10-4.5,10-10v-9v-11v-8v-5.2c0.6,0.1,1.3,0.2,2,0.2h3.1c-0.9,2.6-0.7,5.6,0.8,8.2l0.9,1.6\nc1.6,2.8,4.5,4.6,7.6,4.9l3.8,0.4c0.3,0,0.7,0,1,0h2.9c0,0.2-0.1,0.4-0.1,0.5c0,0.1,0,0.3-0.1,0.4c0,0.2,0,0.4,0,0.6\nc0,0.1,0,0.2,0,0.3c0,0,0,0.1,0,0.1c0,0.2,0,0.4,0,0.5c0,0.2,0,0.3,0,0.5c0,0,0,0.1,0,0.1l1,8c0,0.1,0,0.3,0.1,0.4\nc0,0.2,0,0.3,0.1,0.5c0,0.2,0.1,0.3,0.1,0.5c0,0.1,0.1,0.3,0.1,0.4c0.1,0.2,0.1,0.4,0.2,0.6c0,0.1,0.1,0.2,0.1,0.3\nc0.1,0.3,0.3,0.6,0.4,0.9c0,0,0,0,0,0c0.1,0.3,0.3,0.5,0.5,0.8c0,0.1,0.1,0.1,0.1,0.2c0.1,0.2,0.3,0.4,0.4,0.6\nc0.1,0.1,0.1,0.1,0.2,0.2c0.1,0.2,0.3,0.3,0.4,0.5c0.1,0.1,0.2,0.2,0.3,0.2c0.1,0.1,0.3,0.3,0.4,0.4c0.1,0.1,0.2,0.2,0.3,0.3\nc0.1,0.1,0.3,0.2,0.4,0.3c0.1,0.1,0.2,0.2,0.4,0.2c0.1,0.1,0.3,0.2,0.4,0.3c0.1,0.1,0.3,0.1,0.4,0.2c0.1,0.1,0.3,0.1,0.4,0.2\nc0.1,0.1,0.3,0.1,0.4,0.2c0.2,0.1,0.3,0.1,0.5,0.2c0.1,0,0.3,0.1,0.4,0.1c0.2,0.1,0.4,0.1,0.6,0.1c0.1,0,0.2,0.1,0.3,0.1\nc0.2,0,0.5,0.1,0.7,0.1c0.1,0,0.1,0,0.2,0c0.3,0,0.7,0.1,1,0.1c0,0,0,0,0,0h27c0,0,0,0,0,0c0,0,0,0,0,0h13c1.8,3,5.1,4.7,8.5,4.7\nc1,0,2.1-0.2,3.2-0.5c0.8-0.3,1.6-0.7,2.3-1.1h5.2c1.1,0,2.3-0.2,3.3-0.6l2.6-0.9c0.7-0.2,1.3-0.5,1.9-0.9l0.2-0.1c0,0,0,0,0.1,0\nc0.2,0,0.4,0.1,0.5,0.1c0.1,0,0.1,0,0.2,0.1l0.2,0c0,0,0,0,0,0l4.7,0.9c0,0,0.1,0,0.1,0l0,0c0.1,0,0.1,0,0.2,0\nc0.3,0,0.5,0.1,0.8,0.1c0.3,0,0.7,0.1,1,0.1c0,0,0,0,0,0h8.9c0,0,0,0,0,0c0,0,0,0,0,0h4.4c1.8,2.3,4.6,3.8,7.8,3.8l8.2,0\nc0,0,0,0,0,0c0,0,0,0,0,0c0.3,0,0.7,0,1-0.1c0.1,0,0.1,0,0.2,0c0.2,0,0.5-0.1,0.7-0.1c0.1,0,0.2-0.1,0.3-0.1c0.2,0,0.4-0.1,0.6-0.1\nc0.1,0,0.3-0.1,0.4-0.1c0.2-0.1,0.3-0.1,0.5-0.2c0.1-0.1,0.3-0.1,0.4-0.2c0.1-0.1,0.3-0.1,0.4-0.2c0.1-0.1,0.3-0.1,0.4-0.2\nc0.1-0.1,0.3-0.2,0.4-0.2c0.1-0.1,0.2-0.2,0.4-0.2c0.1-0.1,0.3-0.2,0.4-0.3c0.1-0.1,0.2-0.2,0.3-0.3c0.1-0.1,0.3-0.2,0.4-0.4\nc0.1-0.1,0.2-0.2,0.3-0.3c0.1-0.1,0.3-0.3,0.4-0.4c0.1-0.1,0.1-0.2,0.2-0.2c0.1-0.2,0.3-0.4,0.4-0.5c0.1-0.1,0.1-0.1,0.2-0.2\nc0.1-0.1,0.2-0.3,0.3-0.4h4c0,0,0,0,0,0c0,0,0,0,0,0h25h0c0,0,0.1,0,0.1,0l7.9-0.1c1,0,2-0.2,2.9-0.5c1,0.3,2.1,0.5,3.2,0.5h16\nc0,0,0,0,0,0l14,0c0.2,0,0.3,0,0.5,0c0.2,0,0.4,0,0.5,0c0.2,0,0.3,0,0.5-0.1c0.2,0,0.3,0,0.5-0.1c0.2,0,0.3-0.1,0.5-0.1\nc0.2,0,0.3-0.1,0.5-0.1c0.2-0.1,0.4-0.1,0.5-0.2c0.1,0,0.2-0.1,0.4-0.1c0.2-0.1,0.4-0.2,0.7-0.3c0.1,0,0.1-0.1,0.2-0.1\nc0.2-0.1,0.4-0.3,0.6-0.4c0.1,0,0.1-0.1,0.2-0.1c0.2-0.2,0.5-0.3,0.7-0.5c0,0,0.1,0,0.1-0.1c0.2-0.2,0.4-0.4,0.6-0.6c0,0,0,0,0,0\nc0.1,0.1,0.3,0.2,0.4,0.4c0.1,0.1,0.2,0.2,0.2,0.2c0.2,0.1,0.3,0.2,0.5,0.4c0.1,0.1,0.2,0.1,0.3,0.2c0.2,0.1,0.4,0.2,0.5,0.3\nc0.1,0.1,0.2,0.1,0.3,0.2c0.2,0.1,0.4,0.2,0.6,0.3c0.1,0,0.2,0.1,0.3,0.1c0.2,0.1,0.4,0.2,0.6,0.2c0.1,0,0.2,0.1,0.3,0.1\nc0.2,0.1,0.5,0.1,0.7,0.2c0.1,0,0.2,0,0.3,0.1c0.3,0.1,0.6,0.1,0.9,0.1c0,0,0.1,0,0.1,0c0.3,0,0.7,0.1,1,0.1c0,0,0,0,0,0l4.5,0\nc0.6,0,1.2-0.1,1.8-0.2c1.2,4.2,5,7.3,9.6,7.3c4.5,0,8.3-3,9.6-7.1h4.4h15c0,0,0,0,0,0c0,0,0,0,0,0h14.5l4.8,0.4\nc1.8,1.6,4.1,2.6,6.7,2.6h9h10c0,0,0,0,0,0c0,0,0,0,0,0h7.9c1,0,2.1-0.2,3-0.5c0.9,0.3,2,0.5,3,0.5c5,0,9.1-3.7,9.9-8.4\nc2.5-0.7,4.5-2.4,5.8-4.6h4.3h12h15.9c0,0,0,0,0,0c0,0,0,0,0,0h8.2c-3,3.2-3.7,8.2-1.2,12.1c1.9,3.1,5.2,4.8,8.5,4.8\nc1.8,0,3.6-0.5,5.2-1.5l7.5-4.6l9.6-0.8c0,0,0,0,0,0c0.1,0,0.2,0,0.3,0c0,0,0.1,0,0.1,0l14.7-2l13.7-1c0.1,0,0.2,0,0.2,0\nc0.1,0,0.2,0,0.4,0c0,0,0.1,0,0.1,0l4.5-0.6l0.3,1.5c0,0.1,0,0.2,0.1,0.2c0,0.1,0.1,0.3,0.1,0.4c0,0.2,0.1,0.3,0.1,0.5\nc0,0.1,0.1,0.3,0.1,0.4c0.1,0.1,0.1,0.3,0.2,0.4c0.1,0.1,0.1,0.3,0.2,0.4c0.1,0.1,0.1,0.3,0.2,0.4c0.1,0.1,0.1,0.2,0.2,0.4\nc0.1,0.1,0.2,0.3,0.3,0.4c0.1,0.1,0.1,0.2,0.2,0.3c0.1,0.1,0.2,0.3,0.3,0.4c0.1,0.1,0.2,0.2,0.2,0.3c0.1,0.1,0.2,0.3,0.3,0.4\nc0.1,0.1,0.2,0.2,0.3,0.3c0.1,0.1,0.2,0.2,0.4,0.3c0.1,0.1,0.2,0.2,0.3,0.2c0.1,0.1,0.3,0.2,0.4,0.3c0.1,0.1,0.2,0.2,0.3,0.2\nc0.1,0.1,0.3,0.2,0.4,0.3c0.1,0.1,0.2,0.1,0.3,0.2c0.1,0.1,0.3,0.2,0.4,0.2c0.1,0.1,0.2,0.1,0.3,0.2c0.1,0.1,0.3,0.1,0.4,0.2\nc0.1,0.1,0.2,0.1,0.4,0.2c0.2,0.1,0.3,0.1,0.5,0.2c0.1,0,0.2,0.1,0.4,0.1c0.2,0,0.4,0.1,0.5,0.1c0.1,0,0.2,0.1,0.3,0.1\nc0.2,0,0.5,0.1,0.7,0.1c0.1,0,0.1,0,0.2,0c0.3,0,0.6,0,0.9,0c0.4,0,0.8,0,1.2-0.1c0,0,0.1,0,0.1,0l14.7-2l14.7-1c0.1,0,0.3,0,0.4,0\nc0.1,0,0.2,0,0.3,0c0,0,0,0,0,0l4.3-0.6c0,0,0,0,0,0l0,0c0,0,0,0,0,0l6.3-0.8c0,0,0,0,0,0l4.3-0.6c0,0,0.1,0,0.1,0c0,0,0,0,0,0\nc0,0,0.1,0,0.1,0l13-2c0.1,0,0.1,0,0.2,0c0.1,0,0.1,0,0.2,0c0.1,0,0.2,0,0.3-0.1c0.2,0,0.4-0.1,0.5-0.1c0.2,0,0.3-0.1,0.4-0.1\nc0.2-0.1,0.3-0.1,0.5-0.2c0.1-0.1,0.3-0.1,0.4-0.2c0.2-0.1,0.3-0.1,0.5-0.2c0.1-0.1,0.3-0.1,0.4-0.2c0.1-0.1,0.3-0.2,0.4-0.3\nc0.1-0.1,0.3-0.2,0.4-0.3c0.1-0.1,0.3-0.2,0.4-0.3c0.1-0.1,0.2-0.2,0.4-0.3c0.1-0.1,0.2-0.2,0.4-0.3c0.1-0.1,0.2-0.2,0.3-0.3\nc0.1-0.1,0.2-0.2,0.3-0.4c0.1-0.1,0.2-0.2,0.3-0.4c0.1-0.1,0.2-0.3,0.3-0.4c0.1-0.1,0.2-0.3,0.3-0.4c0.1-0.1,0.2-0.3,0.3-0.4\nc0.1-0.1,0.1-0.3,0.2-0.4c0.1-0.2,0.1-0.3,0.2-0.5c0.1-0.1,0.1-0.3,0.2-0.4c0.1-0.2,0.1-0.3,0.2-0.5c0-0.1,0.1-0.3,0.1-0.4\nc0-0.2,0.1-0.3,0.1-0.5c0-0.2,0.1-0.3,0.1-0.5c0-0.2,0.1-0.3,0.1-0.5c0-0.2,0-0.3,0-0.5c0-0.2,0-0.3,0-0.5c0-0.2,0-0.3,0-0.5\nc0-0.2,0-0.3,0-0.5c0-0.2,0-0.3-0.1-0.5c0-0.1,0-0.2,0-0.3c0,0,0,0,0-0.1l3.5-0.5c0.1,0,0.2,0,0.3-0.1c0.1,0,0.2,0,0.3,0\nc0.1,0,0.1,0,0.2-0.1c0.2,0,0.3-0.1,0.5-0.1c0.2,0,0.3-0.1,0.5-0.1c0.2-0.1,0.3-0.1,0.5-0.2c0.1-0.1,0.3-0.1,0.4-0.2\nc0.2-0.1,0.3-0.1,0.5-0.2c0.1-0.1,0.3-0.1,0.4-0.2c0.1-0.1,0.3-0.2,0.4-0.3c0.1-0.1,0.3-0.2,0.4-0.3c0.1-0.1,0.3-0.2,0.4-0.3\nc0.1-0.1,0.3-0.2,0.4-0.3c0.1-0.1,0.2-0.2,0.3-0.3c0.1-0.1,0.2-0.2,0.4-0.4c0.1-0.1,0.2-0.2,0.3-0.3c0.1-0.1,0.2-0.2,0.3-0.4\nc0.1-0.1,0.2-0.3,0.3-0.4c0.1-0.1,0.2-0.3,0.3-0.4c0.1-0.1,0.2-0.3,0.3-0.4c0.1-0.1,0.2-0.3,0.2-0.4c0.1-0.1,0.1-0.3,0.2-0.5\nc0.1-0.1,0.1-0.3,0.2-0.4c0.1-0.2,0.1-0.3,0.2-0.5c0-0.1,0.1-0.3,0.1-0.4c0-0.2,0.1-0.3,0.1-0.5c0-0.2,0.1-0.3,0.1-0.5\nc0-0.2,0.1-0.3,0.1-0.5c0-0.2,0-0.3,0.1-0.5c0-0.2,0-0.3,0-0.5c0-0.2,0-0.3,0-0.5c0-0.2,0-0.3,0-0.5c0-0.2,0-0.4,0-0.5\nc0-0.1,0-0.2,0-0.2c0-0.1,0-0.2-0.1-0.3c0-0.1,0-0.2,0-0.3l-2-9.9c0,0,0,0,0,0l0-0.1c0-0.1,0-0.2-0.1-0.3c0-0.2-0.1-0.4-0.2-0.6\nc0,0,0,0,0,0l0-0.1c0,0,0,0,0,0l-2.8-9.5l-1.8-9l-0.9-10.3c0,0,0-0.1,0-0.1l0-0.1c0-0.1,0-0.1,0-0.2c0,0,0-0.1,0-0.1\nc0-0.1,0-0.2,0-0.2c0,0,0-0.1,0-0.1c0-0.1,0-0.2,0-0.3c0-0.1,0-0.2-0.1-0.3c0-0.1-0.1-0.3-0.1-0.4c0-0.1,0-0.2-0.1-0.2\nc0-0.1-0.1-0.2-0.1-0.3c0-0.1-0.1-0.3-0.2-0.4c0,0,0-0.1,0-0.1l0-0.1c0,0,0,0,0,0l-3.1-7.8L816,485.4C816,485.4,816,485.4,816,485.4\nz\"/>","import React, { useCallback, useEffect, useLayoutEffect, useRef, useState } from 'react';\nimport './App.css';\nimport data from './microblog.json'\nimport * as d3 from 'd3'\nimport { collectKeywordsByLocationTimeline, collectKeywordsByTimeline, getIndexByTimestamp, getTimestamp, IKeywordStatistics } from './Utils';\nimport { createTheme, DefaultButton, getPersonaInitialsColor, ITextField, loadTheme, Modal, PrimaryButton, Text, TextField, updateA } from '@fluentui/react';\nimport { renderMap, tagPointsOfInterests } from './MapRenderer';\nimport { MapOutline } from './MapBackground';\nimport coordinateRecords from './coor3.json'\nimport { renderMapVisual } from './MapVisualization';\n\nloadTheme(\n  createTheme(\n    {\n      palette: {\n        themePrimary: '#486df1',\n        themeLighterAlt: '#f7f9fe',\n        themeLighter: '#e1e7fd',\n        themeLight: '#c6d2fb',\n        themeTertiary: '#8fa6f7',\n        themeSecondary: '#5e7ef4',\n        themeDarkAlt: '#4162da',\n        themeDark: '#3753b8',\n        themeDarker: '#293d88',\n        neutralLighterAlt: '#faf9f8',\n        neutralLighter: '#f3f2f1',\n        neutralLight: '#edebe9',\n        neutralQuaternaryAlt: '#e1dfdd',\n        neutralQuaternary: '#d0d0d0',\n        neutralTertiaryAlt: '#c8c6c4',\n        neutralTertiary: '#a19f9d',\n        neutralSecondary: '#605e5c',\n        neutralPrimaryAlt: '#3b3a39',\n        neutralPrimary: '#323130',\n        neutralDark: '#201f1e',\n        black: '#000000',\n        white: '#ffffff',\n      },\n      defaultFontStyle: {\n        fontFamily: '\"Inter\", \"SF Pro\", \"Segoe UI Variable\", system-ui, sans-serif'\n      }\n    }\n  )\n)\n\n// Generated by https://quicktype.io\nconst generatedColor = new Array(100).fill(0).map((it, idx) => getPersonaInitialsColor({ text: String(idx) }))\nconst colors = [\"#E8743B\", \"#5899DA\", \"#19A979\", \"#ED4A7B\", \"#945ECF\", \"#13A4B4\", \"#525DF4\", \"#BF399E\", \"#6C8893\", \"#EE6868\", \"rgb(25, 128, 56)\", ...generatedColor]\n//[\"rgb(105, 41, 196)\", \"rgb(17, 146, 232)\", \"rgb(0, 93, 93)\", \"rgb(159, 24, 83)\", \"rgb(250, 77, 86)\", \"rgb(87, 4, 8)\", \"rgb(25, 128, 56)\", \"rgb(0, 45, 156)\", \"rgb(238, 83, 139)\", \"rgb(178, 134, 0)\", \"rgb(0, 157, 154)\", \"rgb(1, 39, 73)\", \"rgb(138, 56, 0)\", \"rgb(165, 110, 255)\"]\n\nexport interface IMicroblogRecord {\n  type: string;\n  date: string;\n  author: string;\n  message: string;\n  latitude: string;\n  longitude: string;\n  location: string;\n  source: string;\n}\n\ninterface IFlattenedRecord {\n  keyword: string,\n  timeIndex: number,\n  start: number,\n  end: number,\n}\n\nconst clearData = () => {\n  return (Object.keys(data).map(\n    // @ts-ignore\n    it => data[it]\n  ) as IMicroblogRecord[]).filter(\n    it => it.author !== 'KronosQuoth'\n  )\n}\n\nconst minTimeStamp = 1390467600000\nconst maxTimeStamp = 1390485600000\n\n\nconst flattenRecords = (records: IKeywordStatistics[], onUniform?: (beforeUniform: IFlattenedRecord[]) => IFlattenedRecord[]) => {\n  const timeSlicing = new Array(records[0].statistic.length).fill(0)\n  const flattened = timeSlicing.flatMap(\n    (_, timeIndex) => {\n      const accumulated = d3.cumsum(\n        records.map(\n          record => record.statistic[timeIndex]\n        )\n      )\n      const paddedWithZero = [0].concat(Array.from(accumulated))\n      return paddedWithZero.slice(0, paddedWithZero.length - 1).map(\n        (value, index) => (\n          {\n            keyword: records[index].keyword,\n            start: value,\n            end: paddedWithZero[index + 1],\n            timeIndex,\n          } as IFlattenedRecord\n        )\n      )\n    }\n  )\n  if (onUniform) {\n    return onUniform(flattened)\n  }\n  return flattened\n}\n\nconst timeWindowInSeconds = 180\n\nconst timeToLiteralString = (time: number) => {\n  const timeString = String(time)\n  return `${timeString.slice(0, 2)}:${timeString.slice(2, 4)}`\n}\n\nconst eventsToDisplay = [\n  {\n    name: 'POK rally started',\n    time: 170000,\n    offset: 108,\n    offsetX: 32,\n    highlightWord: 'POK'\n  },\n  {\n    name: 'Egeou St. closed',\n    time: 171000,\n    offset: 80,\n    offsetX: 32,\n  },\n  {\n    name: 'Fire started',\n    time: 184000,\n    offset: 52,\n    highlightWord: 'Fire'\n  },\n  {\n    name: 'Police arrived',\n    time: 184600,\n    offset: 136,\n    highlightWord: 'Police'\n  },\n  {\n    name: 'POK rally finished',\n    time: 190700,\n    offset: 108,\n    highlightWord: 'POK'\n  },\n  {\n    name: 'Black van hit the car',\n    time: 192000,\n    offset: 52\n  },\n  {\n    name: 'Driver got cornered',\n    time: 193960,\n    offset: 80\n  },\n  {\n    name: 'Police officer got shot',\n    time: 194200,\n    offset: 136,\n    highlightWord: 'Police'\n  },\n  {\n    name: 'Negotiation begun',\n    time: 201000,\n    offset: 108\n  },\n  {\n    name: 'Top floor collapsed',\n    time: 203000,\n    offset: 80,\n    highlightWord: 'Fire'\n  },\n  {\n    name: 'Fire escalated',\n    time: 204000,\n    offset: 52,\n    highlightWord: 'Fire'\n  },\n  {\n    name: '2 surrendered & 2 rescued',\n    time: 211400,\n    offset: 108,\n    offsetX: -16,\n  },\n  {\n    name: 'Fire controlled',\n    time: 212200,\n    offset: 52,\n    offsetX: -16,\n    highlightWord: 'Fire'\n  }\n]\nexport const _allKeywords = ['Fire', 'POK', 'Traffic', 'Police', 'Gun', 'Shoot', 'Kronos', 'Abila' ]\n\n\n\n\nconst records = clearData();\n\n\nconst maxHeight = 500\n\nconst xAxisAttrib = [170000, 180000, 190000, 200000, 210000]\nconst minTime = 165100\nconst maxTime = 214500\n\nfunction App() {\n  const [allKeywords, setAllKeyword] = useState<string[]>(_allKeywords);\n  // const [microblogRecords, setMicroblogRecords] = useState<IKeywordStatistics[]>([]);\n  const timeKeywordViewRef = useRef<SVGSVGElement>(null);\n  const [timeSlices, setTimeSlices] = useState(0);\n  const [selectedKeywords, setSelectedKeywords] = useState<string[]>(allKeywords);\n\n  const [isCrossFiltering, setCrossFiltering] = useState(false);\n  const [crossFilterStart, setCrossFilterStart] = useState<number>(0);\n  const [crossFilterEnd, setCrossFilterEnd] = useState<number>(0);\n\n  const [placeName, setPlaceName] = useState(\"\");\n\n  const textFieldRef = React.useRef<ITextField>(null);\n\n  const [flattenedRecordCache, setFlattenedRecordCache] = useState<IKeywordStatistics[]>([]);\n  useEffect(\n    () => {\n      const microblogRecords = collectKeywordsByTimeline(\n        records,\n        minTime,\n        maxTime,\n        timeWindowInSeconds,\n        selectedKeywords\n      )\n      setFlattenedRecordCache(microblogRecords)\n      setTimeSlices(microblogRecords[0].statistic.length)\n      if (microblogRecords.length <= 0) return;\n\n      const svg = d3.select('#view-1')\n\n      const svgRect = (svg.node?.() as SVGSVGElement).getBoundingClientRect()\n\n      let yAxisAttrib = [0, 50, 100, 150, 200]\n      const maxValue = yAxisAttrib[yAxisAttrib.length - 1]\n      const flattened = flattenRecords(microblogRecords, (items) => {\n        // const maxVal = Math.max(...items.map(it => it.end))\n        return items.map(\n          it => ({\n            ...it,\n            start: it.start * maxHeight / maxValue,\n            end: it.end * maxHeight / maxValue,\n          })\n        )\n      })\n\n\n\n      const xAxis = svg.select('g.x-axis')\n      const yAxis = svg.select('g.y-axis')\n      const xText = svg.select('g.x-text')\n      const yText = svg.select('g.y-text')\n      const group = svg.select('g.stack')\n\n\n\n      xAxis.selectAll('path')\n        .data(yAxisAttrib)\n        .join(\n          enter => enter.append('path')\n        )\n        .attr('d', d => {\n          const h = (value: number) => (1 - value / maxValue) * maxHeight + .5\n          return `M0 ${h(d)}L ${svgRect.width} ${h(d)}Z`\n        })\n        .attr('stroke', '#f1f2f6')\n        .attr('stroke-width', 1)\n\n      yAxis.selectAll('path')\n        .data(xAxisAttrib)\n        .join(\n          enter => enter.append('path')\n        )\n        .attr('d', d => {\n          const h = (v: number) => getIndexByTimestamp(minTime, timeWindowInSeconds)(v) / microblogRecords[0].statistic.length * svgRect.width\n          return `M${h(d) + .5} 0 L${h(d) + .5} ${maxHeight + 20}Z`\n        })\n        .attr('stroke', '#f1f2f6')\n        .attr('stroke-width', 1)\n        .attr('stroke-dasharray', d => d === 170000 || d === 214000 ? '' : '8px 4px')\n\n      yText.selectAll('text')\n        .data(xAxisAttrib)\n        .join(\n          enter => enter.append('text')\n        )\n        .text(timeToLiteralString)\n        .attr('fill', '#999')\n        .attr('font-size', 12)\n        .attr('dominant-baseline', 'text-before-edge')\n        .attr('font-weight', 600)\n        .attr('transform', d => `translate(${getIndexByTimestamp(minTime, timeWindowInSeconds)(d) / microblogRecords[0].statistic.length * svgRect.width + 4\n          }, ${maxHeight + 4})`)\n\n      xText.selectAll('text')\n        .data(yAxisAttrib)\n        .join(\n          enter => enter.append('text')\n        )\n        .text(d => d)\n        .attr('fill', '#999')\n        .attr('font-size', 12)\n        .attr('text-anchor', 'end')\n        // .attr('dominant-baseline', 'text-after-edge')\n        .attr('font-weight', 600)\n        .attr('transform', d => `translate(${svgRect.width}, ${maxHeight * (1 - d / maxValue) - 10})`)\n\n\n\n\n\n\n      group.selectAll('rect')\n        .data(\n          flattened,\n          d => `${(d as IFlattenedRecord).keyword}${(d as IFlattenedRecord).timeIndex}`\n        ).join(\n          enter => {\n            const e = enter.append('rect')\n              .attr('fill', d => colors[allKeywords.findIndex(it => it === d.keyword) ?? -1])\n              .attr('x', (d, i) => `${100 / microblogRecords[0].statistic.length * d.timeIndex}%`)\n              .attr('y', (d, i) => (maxHeight - d.start))\n              .attr('width', `calc(${100 / microblogRecords[0].statistic.length}% - 0.5px)`)\n              .attr('height', 0);\n\n            e.transition().duration(300)\n              .attr('y', (d, i) => (maxHeight - d.end))\n              .attr('height', (d, i) => d.end - d.start)\n            return e;\n          },\n          update => {\n            return update.transition().duration(500)\n              .attr('x', (d, i) => `${100 / microblogRecords[0].statistic.length * d.timeIndex}%`)\n              .attr('y', (d, i) => (maxHeight - d.end))\n              .attr('width', `calc(${100 / microblogRecords[0].statistic.length}% - 0.5px)`)\n              .attr('height', (d, i) => d.end - d.start);\n          },\n          remove => {\n            return remove.attr('opacity', 1).transition().duration(500).attr('opacity', 0).attr('height', 0).remove();\n          }\n        )\n\n\n      return () => {\n\n      }\n    }, [timeKeywordViewRef.current, selectedKeywords]\n  )\n\n\n  const uniformCrossFilterXValue = React.useCallback(\n    (offsetX: number) => {\n      const svgRect = timeKeywordViewRef.current?.getBoundingClientRect();\n      if (!svgRect) return 0;\n      return Math.floor(offsetX / svgRect.width * timeSlices) * (svgRect.width / timeSlices)\n    }, [timeSlices, timeKeywordViewRef]\n  )\n\n  const getTimeIndexByNonUniformedOffsetX = React.useCallback(\n    (offsetX: number) => {\n      const svgRect = timeKeywordViewRef.current?.getBoundingClientRect();\n      if (!svgRect) return 0;\n      return Math.floor(offsetX / svgRect.width * timeSlices)\n    }, [timeSlices, timeKeywordViewRef]\n  )\n\n\n  const getTimeByNonUniformedOffsetX = React.useCallback(\n    (offsetX: number) => {\n      const svgRect = timeKeywordViewRef.current?.getBoundingClientRect();\n      if (!svgRect) return 0;\n      const index = Math.floor(offsetX / svgRect.width * timeSlices)\n      const secondsElapsed = index * timeWindowInSeconds + (minTime - 160000) * 0.6\n      const second = secondsElapsed % 60\n      const hour = Math.floor(secondsElapsed / 3600)\n      const minute = Math.floor((secondsElapsed % 3600) / 60)\n      // console.log(hour, minute, second)\n      const timeElapsed = second + minute * 100 + hour * 10000 + 160000\n      // console.log(timeElapsed)\n      return timeElapsed\n    }, [timeSlices, timeKeywordViewRef]\n  )\n\n  const collectSlicedKeywordStatics = React.useCallback(\n    (_startIndex: number, _endIndex: number, keywords: string[]) => {\n      const startIndex = Math.min(_startIndex, _endIndex)\n      const endIndex = Math.max(_startIndex, _endIndex)\n\n      return keywords.map(\n        it => ({\n          keywords: it,\n          frequency: [0].concat(flattenedRecordCache.find(record => record.keyword === it)?.statistic.slice(startIndex, endIndex) ?? []).reduce((a, b) => a + b)\n        })\n      )\n    }, [timeSlices, timeKeywordViewRef, flattenedRecordCache]\n  )\n\n  useLayoutEffect(\n    () => {\n      if (timeSlices <= 1) return;\n      const keyEvents = d3.select('g.key-event')\n      const svgRect = (d3.select('#view-1').node?.() as SVGSVGElement).getBoundingClientRect()\n      keyEvents.selectAll('path')\n        .data(eventsToDisplay,\n          //@ts-ignore\n          d => d.name\n        )\n        .join(\n          enter => enter.append('path')\n        )\n        .attr('style', d => selectedKeywords.length <= 3 && selectedKeywords.includes(d.highlightWord ?? '') ? `stroke:${colors[allKeywords.findIndex(it => it === d.highlightWord) ?? -1]};` : '')\n        .attr('d', d => {\n          return `M${getIndexByTimestamp(minTime, timeWindowInSeconds)(d.time) / timeSlices * svgRect.width} ${maxHeight} L${getIndexByTimestamp(minTime, timeWindowInSeconds)(d.time) / timeSlices * svgRect.width} ${maxHeight + d.offset}Z`\n        })\n\n      keyEvents.selectAll('circle')\n        .data(eventsToDisplay,\n          //@ts-ignore\n          d => d.name\n        )\n        .join(\n          enter => enter.append('circle')\n        )\n        .attr('r', 2)\n        .attr('cy', maxHeight)\n        .attr('style', d => selectedKeywords.length <= 3 && selectedKeywords.includes(d.highlightWord ?? '') ? `fill:${colors[allKeywords.findIndex(it => it === d.highlightWord) ?? -1]};opacity:1;mix-blend-mode:normal` : '')\n        .attr('cx', d => getIndexByTimestamp(minTime, timeWindowInSeconds)(d.time) / timeSlices * svgRect.width)\n\n      keyEvents.selectAll('foreignObject')\n        .data(eventsToDisplay,\n          //@ts-ignore\n          d => d.name\n        )\n        .join(\n          enter => enter.append('foreignObject')\n        )\n        .attr('xmlns', 'http://www.w3.org/1999/xhtml')\n        .attr('xmlns:xhtml', 'http://www.w3.org/1999/xhtml')\n        .attr('y', d => maxHeight + d.offset)\n        .attr('x', d => (d.offsetX ?? 0) + getIndexByTimestamp(minTime, timeWindowInSeconds)(d.time) / timeSlices * svgRect.width - 150)\n        .attr('width', 300)\n        .attr('height', 30)\n        .append('xhtml:div')\n        .attr('class', 'event-text')\n        .append('xhtml:span')\n        .attr('class', 'event-text')\n        .text(d => d.name)\n        .attr('style', d => selectedKeywords.length <= 3 && selectedKeywords.includes(d.highlightWord ?? '') ? `background-color:${colors[allKeywords.findIndex(it => it === d.highlightWord) ?? -1]}; color:#fff;` : '')\n\n      // if (selectedKeywords.length <= 3) {\n      //   const getBumpline = d3.line()\n      //     .y((d: any) => maxHeight + d.offset + 10)\n      //     .x((d: any) => (d.offsetX ?? 0) + getIndexByTimestamp(minTime, timeWindowInSeconds)(d.time) / timeSlices * svgRect.width)\n      //     .curve(d3.curveBumpX);\n\n      //   keyEvents.selectAll('path.event-line')\n      //     .data(\n      //       selectedKeywords.map(kw => eventsToDisplay.filter(it => it.highlightWord?.includes(kw)))\n      //     )\n      //     .enter()\n      //     .append('path')\n      //     .attr('class', 'event-line')\n      //     .attr(\n      //       'd', d => {\n      //         console.log(d)\n      //         return getBumpline(d as any)\n      //       }\n      //     )\n      //     .attr('fill', 'none')\n      //     .attr('stroke-width', 1)\n      //     .attr('style', d => `stroke:${colors[allKeywords.findIndex(it => it === d[0].highlightWord) ?? 0]}!important`)\n      // }\n\n      return () => {\n        keyEvents.selectAll('foreignObject').remove();\n        keyEvents.selectAll('path.event-line').transition().duration(200).attr('opacity', 0).remove();\n      }\n    }, [timeSlices, selectedKeywords]\n  )\n\n  const correspondingRecords: { keyword: string, count: number }[] = React.useMemo(\n    () => {\n      if (placeName.length === 0) return []\n\n      const timeRegion = {\n        start: getTimeByNonUniformedOffsetX(crossFilterStart),\n        end: getTimeByNonUniformedOffsetX(crossFilterEnd)\n      }\n\n      return selectedKeywords.map(\n        it => ({\n          keyword: it,\n          count: collectKeywordsByLocationTimeline(\n            records.filter(\n              it => it.type === 'ccdata'\n            )\n          )?.get(placeName)?.filter(\n            blog => {\n              if (timeRegion.end === timeRegion.start) {\n                return blog.message.toLowerCase().includes(\n                  it.toLowerCase()\n                )\n              }\n              else {\n                const publishTime = Number(blog.date) % 1000000\n                return blog.message.toLowerCase().includes(\n                  it.toLowerCase()\n                )\n                  && ((timeRegion.start < publishTime && publishTime < timeRegion.end && timeRegion.start < timeRegion.end))\n                  || (timeRegion.end < publishTime && publishTime < timeRegion.start && timeRegion.end < timeRegion.start)\n              }\n            }\n          )?.length ?? 0\n        })\n      ).sort((a, b) => b.count - a.count)\n\n    }, [crossFilterStart, crossFilterEnd, placeName, selectedKeywords]\n  )\n\n\n  const [isModalOpen, setModalOpen] = useState(false);\n\n  useEffect(\n    () => {\n      const mapSvgSelection = d3.select(\"#view-2\")\n      renderMap(mapSvgSelection)\n      return () => {\n        mapSvgSelection.remove();\n      }\n    }, []\n  )\n  useEffect(\n    () => {\n      const mapSvgSelection = d3.select(\"#view-2\")\n      const stripeSvgSelection = d3.select(\"#view-2-overlap\")\n      const poiLayer = tagPointsOfInterests(\n        mapSvgSelection,\n        coordinateRecords,\n        collectKeywordsByLocationTimeline(\n          records.filter(\n            it => it.type === 'ccdata'\n          )\n        ),\n        stripeSvgSelection,\n        selectedKeywords.map(\n          it => ({\n            keyword: it,\n            color: colors[allKeywords.findIndex(it2 => it2 === it) ?? -1]\n          })\n        ),\n        {\n          start: getTimeByNonUniformedOffsetX(crossFilterStart),\n          end: getTimeByNonUniformedOffsetX(crossFilterEnd)\n        },\n        (node) => {\n          setPlaceName(node.poiName)\n        }\n      )\n      return () => {\n        // poiLayer.remove()\n      }\n    }, [crossFilterStart, crossFilterEnd, selectedKeywords]\n  )\n  return (\n    <div className=\"root\">\n      <div id=\"container-1\" className=\"view-container\">\n        <h1 style={{ paddingTop: 0 }}>\n          Timeline\n        </h1>\n        <div style={{ position: 'absolute', pointerEvents: 'none' }}>\n          {getTimeByNonUniformedOffsetX(crossFilterStart) !== getTimeByNonUniformedOffsetX(crossFilterEnd) && <div style={{\n            position: 'absolute',\n            minWidth: 300,\n            height: 96,\n            borderRadius: 8,\n            top: -8,\n            padding: 16,\n            left: Math.min(uniformCrossFilterXValue(crossFilterStart), uniformCrossFilterXValue(crossFilterEnd)) - 8,\n            width: Math.abs(uniformCrossFilterXValue(crossFilterEnd) - uniformCrossFilterXValue(crossFilterStart)) + 16,\n            transition: 'width 0.12s, left 0.1s'\n          }}>\n            <div style={{ paddingTop: 0, color: '#999', fontWeight: 600, fontSize: 12, lineHeight: 2 }}>{\n              timeToLiteralString(getTimeByNonUniformedOffsetX(crossFilterStart))\n            } - {\n                timeToLiteralString(getTimeByNonUniformedOffsetX(crossFilterEnd))\n              }</div>\n            {\n              collectSlicedKeywordStatics(getTimeIndexByNonUniformedOffsetX(crossFilterStart), getTimeIndexByNonUniformedOffsetX(crossFilterEnd), selectedKeywords).map(\n                (it, idx) => <span\n                  className=\"keyword\"\n                  key={it.keywords}\n                  style={{\n                    backgroundColor: '#ffffffd0',\n                    backdropFilter: 'blur(4px)!important',\n                    WebkitBackdropFilter: 'blur(4px) saturate(1.5)'\n                  }}\n                >\n                  <div style={{\n                    backgroundColor: colors[allKeywords.findIndex(_it => _it === it.keywords) ?? -1],\n                    display: 'inline-block',\n                    width: 12,\n                    height: 12,\n                    borderRadius: 2,\n                    marginRight: 6\n                  }} />\n                  <span style={{\n                    fontWeight: 400,\n                    fontFeatureSettings: '\"tnum\"'\n                  }}>{it.keywords}, {it.frequency}</span>\n                </span>\n              )\n            }\n          </div>\n          } </div>\n\n        <svg id=\"view-1\" ref={timeKeywordViewRef} onContextMenu={(e) => { e.preventDefault() }}>\n          <g className=\"x-axis\" style={{ pointerEvents: 'none' }} />\n          <g className=\"y-axis\" style={{ pointerEvents: 'none' }} />\n          <g className=\"x-text\" style={{ pointerEvents: 'none' }} />\n          <g className=\"y-text\" style={{ pointerEvents: 'none' }} />\n          <g className=\"stack\" style={{ pointerEvents: 'none' }} />\n          <g className=\"key-event\" style={{ pointerEvents: 'none' }} />\n\n\n          <g className=\"cross-filter\" style={{ pointerEvents: 'none' }}>\n            {(isCrossFiltering || uniformCrossFilterXValue(crossFilterStart) !== uniformCrossFilterXValue(crossFilterEnd)) &&\n              <rect style={{\n                fill: '#f1f2f6',\n                mixBlendMode: 'multiply',\n                height: maxHeight,\n                // transition: 'width 0.2s, x 0.16s'\n              }}\n                x={Math.min(uniformCrossFilterXValue(crossFilterStart), uniformCrossFilterXValue(crossFilterEnd))}\n                width={Math.abs(uniformCrossFilterXValue(crossFilterEnd) - uniformCrossFilterXValue(crossFilterStart))}\n              />}\n          </g>\n\n          <g className=\"interaction-layer\">\n            <rect style={{ fill: 'transparent', width: '100%', height: 500 }}\n              onMouseDown={ev => {\n                if (!isCrossFiltering) {\n                  setCrossFilterStart(ev.nativeEvent.offsetX)\n                  setCrossFilterEnd(ev.nativeEvent.offsetX)\n                  setCrossFiltering(true);\n                }\n              }}\n              onMouseUp={ev => {\n                if (isCrossFiltering)\n                  setCrossFiltering(false)\n                // if (crossFilterStart !== null) setCrossFilterStart(null)\n              }}\n              onMouseMove={\n                ev => {\n                  if (isCrossFiltering) {\n                    setCrossFilterEnd(ev.nativeEvent.offsetX)\n                  }\n                }\n              }\n            />\n          </g>\n        </svg>\n\n        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n          <h1>\n            Keywords ({selectedKeywords.length} Selected)\n          </h1>\n          <div className=\"link-button\"\n            onClick={() => { setSelectedKeywords(allKeywords) }}>\n            Select All\n          </div>\n        </div>\n        <div style={{ backgroundColor: '#f1f2f6', borderRadius: 8, padding: '16px 16px 8px 16px' }}>\n          {\n            allKeywords.map(\n              (it, idx) => <span\n                className=\"keyword\"\n                key={it}\n                onClick={\n                  () => {\n                    const selected = new Set<string>(selectedKeywords);\n                    if (selectedKeywords.length === allKeywords.length) {\n                      setSelectedKeywords([it]);\n                      return;\n                    }\n                    if (selectedKeywords.length === 1 && it === selectedKeywords[0]) {\n                      setSelectedKeywords(allKeywords)\n                      return;\n                    }\n                    if (selected.has(it)) { selected.delete(it) }\n                    else { selected.add(it) }\n                    setSelectedKeywords(Array.from(selected))\n                  }\n                }\n                style={{\n                  backgroundColor: selectedKeywords.includes(it) ? undefined : 'transparent',\n                }}\n              >\n                <div style={{\n                  backgroundColor: colors[idx],\n                  display: 'inline-block',\n                  width: 12,\n                  height: 12,\n                  borderRadius: 2,\n                  marginRight: 6\n                }} />\n                <span style={{\n                  fontWeight: 400\n                }}>{it}</span>\n              </span>\n            )\n          }\n\n\n          <span\n            className=\"keyword\"\n            onClick={() => {\n              setModalOpen(true)\n            }}\n          >\n            <div style={{\n              backgroundColor: '#00000000',\n              display: 'inline-flex',\n              width: 12,\n              height: 12,\n              borderRadius: 2,\n              marginRight: 6,\n\n            }}>\n              <svg width=\"12\" height=\"12\" viewBox=\"0 0 12 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M6.5 1.75C6.5 1.33579 6.16421 1 5.75 1C5.33579 1 5 1.33579 5 1.75V5H1.75C1.33579 5 1 5.33579 1 5.75C1 6.16421 1.33579 6.5 1.75 6.5H5V9.75C5 10.1642 5.33579 10.5 5.75 10.5C6.16421 10.5 6.5 10.1642 6.5 9.75V6.5H9.75C10.1642 6.5 10.5 6.16421 10.5 5.75C10.5 5.33579 10.1642 5 9.75 5H6.5V1.75Z\" fill=\"#486df1\" />\n              </svg>\n\n            </div>\n            Add a new keyword\n          </span>\n        </div>\n      </div>\n      <div id=\"container-2\" className=\"view-container\" style={{ position: 'relative' }}>\n        <h1 style={{ paddingTop: 0 }}>\n          Map\n        </h1>\n        {placeName && placeName.length > 0 && <div style={{ borderRadius: 8, backgroundColor: '#f1f2f6', width: 360, height: 210, right: 48, top: 120, position: 'absolute', padding: 16 }}>\n          <h1 style={{ marginTop: 0 }}>{placeName}</h1>\n          {(getTimeByNonUniformedOffsetX(crossFilterStart) !== getTimeByNonUniformedOffsetX(crossFilterEnd)) && <div style={{ paddingTop: 0, color: '#999', fontWeight: 600, fontSize: 12, paddingBottom: 12 }}>{\n            timeToLiteralString(getTimeByNonUniformedOffsetX(crossFilterStart))\n          } - {\n              timeToLiteralString(getTimeByNonUniformedOffsetX(crossFilterEnd))\n            }&nbsp;</div>}\n          <div>\n            {\n              correspondingRecords.map(\n                (it, idx) => {\n                  return it.count > 0 && <span\n                    className=\"keyword\"\n                    key={it.keyword}\n                  >\n                    <div style={{\n                      backgroundColor: colors[allKeywords.findIndex(it2 => it2 === it.keyword) ?? -1],\n                      display: 'inline-block',\n                      width: 12,\n                      height: 12,\n                      borderRadius: 2,\n                      marginRight: 6\n                    }} />\n                    <span style={{\n                      fontWeight: 400\n                    }}>{it.keyword}, {it.count}</span>\n                  </span>\n                }\n              )\n            }\n          </div>\n        </div>}\n        <svg id=\"view-2\" viewBox=\"80 40 780 780\">\n          {MapOutline}\n          <g id=\"map\" />\n          <g id=\"poi\" />\n        </svg>\n        {/* <svg id=\"view-2-overlap\" style={{ width: '100%', height: '100%', position: 'relative', top: -780 }} /> */}\n      </div>\n      <Modal isOpen={isModalOpen} styles={{\n        main: {\n          borderRadius: 8,\n          minHeight: 100\n        },\n\n      }}\n        overlay={{\n          styles: {\n            root: {\n              background: 'rgba(0,0,0,.7)'\n            }\n          }\n        }}>\n\n        <Text variant=\"xLarge\" block style={{ padding: 24, paddingBottom: 0, marginBottom: 0, paddingTop: 32 }}>Add a new keyword</Text>\n        <div style={{ display: 'grid', gridTemplateColumns: '180px 180px', padding: 23, gridTemplateRows: 'auto auto', columnGap: 16, rowGap: 16 }} >\n          <TextField\n            label=\"New keyword (alphabetical letters only)\"\n            styles={{ root: { gridColumnEnd: '3', gridColumnStart: '1' } }}\n            placeholder=\"Fire...\"\n            componentRef={textFieldRef}\n          />\n          <DefaultButton onClick={() => { setModalOpen(false) }}>Cancel</DefaultButton>\n          <PrimaryButton onClick={() => {\n            if (\n              textFieldRef.current?.value\n              && textFieldRef.current.value.length > 0\n            ) {\n              if (!textFieldRef.current.value.match(/^[a-zA-Z]+$/))\n                alert('Invalid input as a keyword.')\n              else if(allKeywords.map(it => it.toLowerCase()).includes(textFieldRef.current.value.toLowerCase())){\n                alert(`The keyword \"${textFieldRef.current.value}\" is already in the list.`)\n              }else{\n                setAllKeyword([...allKeywords, textFieldRef.current.value])\n                setSelectedKeywords([...selectedKeywords, textFieldRef.current.value])\n                setModalOpen(false)\n              }\n            }\n          }\n          }>Add</PrimaryButton>\n        </div>\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}